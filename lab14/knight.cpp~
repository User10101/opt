#include <fstream>
#include <queue>

using namespace std;

const size_t MAX_D = 1000 * 1000;

struct Cell
{
public:
  Cell() : Cell(MAX_D, MAX_D, MAX_D) {}
  Cell(size_t _d, size_t pi, size_t pj,
       bool v = false)
    : d(_d), prev_i(pi), prev_j(pj), visited(v)
  {}

  bool operator < (const Cell &c)
  {
    return d < c.d;
  }

  size_t d;
  size_t prev_i;
  size_t prev_j;
  bool visited;
};

class Cell_comp
{
public:
  bool operator () (const Cell *c1, const Cell *c2)
  {
    return c1->d < c2->d;
  }
};

int main(int argc, char *argv[])
{
  int N;
  ifstream ist("input.txt");
  ist >> N;
  char **plane = new char*[N];
  Cell **cells = new Cell*[N];
  size_t pi, pj;
  for (size_t i = 0; i < N; ++i) {
    plane[i] = new char[N];
    cells[i] = new Cell[N];
    for (size_t j = 0; j < N; ++j) {
      plane[i][j] = ist.get();
      if (plane[i][j] == '*') {
	pi = i;
	pj = j;
      }
    }
  }
  ist.close();

  std::priority_queue<Cell*, vector<Cell*>, Cell_comp> queue;
  queue.push(&cells[pi][pj]);
  ofstream ost("output.txt");
  ost << N;
  ost.close();

  return 0;
}
